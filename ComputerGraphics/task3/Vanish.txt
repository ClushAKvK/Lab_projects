#include <windows.h> 
#include "glut.h" 

char title[] = "3D Shapes with animation";
GLfloat angle = 0.0f;
//GLfloat angleCube = 0.0f;   
int refreshMills = 15;

void initGL() {
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glClearDepth(1.0f);
    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LEQUAL);
    glShadeModel(GL_SMOOTH);
    glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glMatrixMode(GL_MODELVIEW);


    glLoadIdentity();
    glTranslatef(0.0f, -0.5f, -20.0f);
    glRotatef(-90.0, 1.0f, 0.0f, 0.0f);


    glColor4f(1.0f, 0.5f, 0.0f, 0.0f);

    glRotatef(angle, 0.0f, 0.0f, 1.0f);


    /////////////////////Тело
    glColor3f(0.1f, 0.0f, 0.0f);
    glPushMatrix;
    glTranslatef(0.0f, 0.0f, 0.0f);
    glutSolidSphere(3, 20, 10);
    glPopMatrix;

    glColor3f(0.1f, 0.0f, 0.0f);
    glPushMatrix;
    glTranslatef(0.0f, 0.0f, -1.0f);
    glutSolidSphere(3, 20, 10);
    glPopMatrix;

    glColor3f(0.1f, 0.0f, 0.0f);
    glPushMatrix;
    glTranslatef(0.0f, 0.0f, -1.0f);
    glutSolidSphere(3, 20, 10);
    glPopMatrix;

    /////////////////////Левая нога
    glColor4f(1.0f, 0.5f, 0.0f, 0.0f);
    glPushMatrix;
    glTranslatef(-2.0f, -2.0f, -2.0f);
    glutSolidSphere(1.5, 20, 10);
    glPopMatrix;

    /////////////////////Левая нога
    glColor4f(1.0f, 0.5f, 0.0f, 0.0f);
    glPushMatrix;
    glTranslatef(4.0f, 0.0f, 0.0f);
    glutSolidSphere(1.5, 20, 10);
    glPopMatrix;

    /////////////////////Левая рука
    glColor4f(1.0f, 0.5f, 0.0f, 0.0f);
    glPushMatrix;
    glTranslatef(0.0f, 0.0f, 4.0f);
    glutSolidSphere(1.0, 20, 10);
    glPopMatrix;

    /////////////////////Правая рука
    glColor4f(1.0f, 0.5f, 0.0f, 0.0f);
    glPushMatrix;
    glTranslatef(-4.0f, 0.0f, 0.0f);
    glutSolidSphere(1.0, 20, 10);
    glPopMatrix;

    /////////////////////Голова
    glColor3f(0.1f, 0.0f, 0.0f);
    glPushMatrix;
    glTranslatef(2.0f, 1.5f, 4.0f);
    glutSolidSphere(2.5, 20, 10);
    glPopMatrix;

    /////////////////////Левое ухо
    glColor4f(1.0f, 1.0f, 0.0f, 0.0f);
    glPushMatrix;
    glTranslatef(-1.0f, -1.0f, 2.0f);
    glutSolidSphere(0.5, 20, 10);
    glPopMatrix;

    /////////////////////Правое ухо
    glColor4f(1.0f, 1.0f, 0.0f, 0.0f);
    glPushMatrix;
    glTranslatef(2.0f, 0.0f, 0.0f);
    glutSolidSphere(0.5, 20, 10);
    glPopMatrix;

    /////////////////////Левый глаз
    glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
    glPushMatrix;
    glTranslatef(-1.3f, -1.3f, -1.0f);
    glutSolidSphere(0.2, 20, 10);
    glPopMatrix;
    
    /////////////////////Правый глаз
    glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
    glPushMatrix;
    glTranslatef(1.3f, 0.2f, 0.0f);
    glutSolidSphere(0.2, 20, 10);
    glPopMatrix;
    
    /////////////////////Морда
    glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
    glPushMatrix;
    glTranslatef(-0.6f, -0.3f, -0.7f);
    glutSolidSphere(0.5, 20, 10);
    glPopMatrix;
    

    glRotatef(90, 1, 0, 0);

    /////////////////////Ротик
    glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
    glPushMatrix;
    glTranslatef(0.0f, -0.7f, 0.0f);
    glutSolidTorus(0.1, 0.2, 20, 20);
    glPopMatrix;

    /////////////////////Кольцо 1
    glColor3f(0.0f, 0.0f, 1.0f);
    glPushMatrix;
    glTranslatef(-1.5f, -5.0f, 0.0f);
    glutSolidTorus(0.2, 0.4, 20, 20);
    glPopMatrix;

    /////////////////////Кольцо 2
    glColor4f(1.0f, 1.0f, 0.0f, 0.0f);
    glPushMatrix;
    glTranslatef(0.7f, -0.3f, 0.0f);
    glutSolidTorus(0.2, 0.4, 20, 20);
    glPopMatrix;

    /////////////////////Кольцо 3
    glColor3f(0.0f, 0.0f, 0.0f);
    glPushMatrix;
    glTranslatef(0.7f, 0.3f, 0.0f);
    glutSolidTorus(0.2, 0.4, 20, 20);
    glPopMatrix;

    /////////////////////Кольцо 4
    glColor3f(0.0f, 1.0f, 0.0f);
    glPushMatrix;
    glTranslatef(0.7f, -0.3f, 0.0f);
    glutSolidTorus(0.2, 0.4, 20, 20);
    glPopMatrix;

    /////////////////////Кольцо 5
    glColor4f(1.0f, 0.0f, 0.0f, 0.0f);
    glPushMatrix;
    glTranslatef(0.7f, 0.3f, 0.0f);
    glutSolidTorus(0.2, 0.4, 20, 20);
    glPopMatrix;


    glutSwapBuffers();


    angle += 1.5f;
}


void timer(int value) {
    glutPostRedisplay();
    glutTimerFunc(refreshMills, timer, 0);
}


void reshape(GLsizei width, GLsizei height) {

    if (height == 0) height = 1;
    GLfloat aspect = (GLfloat)width / (GLfloat)height;


    glViewport(0, 0, width, height);


    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f, aspect, 0.1f, 100.0f);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE);
    glutInitWindowSize(640, 480);
    glutInitWindowPosition(50, 50);
    glutCreateWindow(title);
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    initGL();
    glutTimerFunc(0, timer, 0);
    glutMainLoop();
    return 0;
}